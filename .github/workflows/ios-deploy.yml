name: iOS Build & TestFlight Deploy

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-deploy-ios:
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Sync Capacitor
        run: npx cap sync ios
      
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_P12 }}
          P12_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD}}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Créer variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Importer certificat depuis secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # Importer provisioning profile
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Créer keychain temporaire
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Importer certificat dans keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Appliquer provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
      
      - name: Install Fastlane
        run: sudo gem install fastlane -NV
      
      - name: Create Fastlane files
        run: |
          mkdir -p ios/App/fastlane
          
          cat > ios/App/fastlane/Appfile << 'EOF'
          app_identifier("io.winedge.app")
          team_id(ENV["APPLE_TEAM_ID"])
          EOF
          
          cat > ios/App/fastlane/Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Build and upload to TestFlight"
            lane :beta do
              api_key = app_store_connect_api_key(
                key_id: ENV["APP_STORE_KEY_ID"],
                issuer_id: ENV["APP_STORE_ISSUER_ID"],
                key_content: Base64.decode64(ENV["APP_STORE_P8"]),
                is_key_content_base64: false,
                in_house: false
              )
              
              increment_build_number(
                build_number: latest_testflight_build_number(
                  api_key: api_key,
                  app_identifier: "io.winedge.app"
                ) + 1,
                xcodeproj: "App.xcodeproj"
              )
              
              build_app(
                scheme: "App",
                workspace: "App.xcworkspace",
                export_method: "app-store",
                configuration: "Release",
                output_directory: "./build",
                output_name: "WinEdge.ipa"
              )
              
              upload_to_testflight(
                api_key: api_key,
                skip_waiting_for_build_processing: true,
                ipa: "./build/WinEdge.ipa"
              )
            end
          end
          EOF
      
      - name: Build and Deploy
        env:
          APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
          APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}
          APP_STORE_P8: ${{ secrets.APP_STORE_P8 }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          cd ios/App
          fastlane beta
      
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
      
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: WinEdge-IPA
          path: ios/App/build/WinEdge.ipa
          retention-days: 30